// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RistoranteManager.Data;

#nullable disable

namespace RistoranteManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RistoranteManager.Models.DoughType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DoughTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalPrice = 0m,
                            Name = "Classica"
                        },
                        new
                        {
                            Id = 2,
                            AdditionalPrice = 0m,
                            Name = "Napoli"
                        },
                        new
                        {
                            Id = 3,
                            AdditionalPrice = 2m,
                            Name = "Cereali"
                        },
                        new
                        {
                            Id = 4,
                            AdditionalPrice = 2m,
                            Name = "Senza Glutine"
                        });
                });

            modelBuilder.Entity("RistoranteManager.Models.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.ToTable("Extras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mozzarella senza lattosio",
                            Price = 1.5m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bufala",
                            Price = 2m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Funghi porcini",
                            Price = 2.5m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Prosciutto crudo",
                            Price = 2m
                        });
                });

            modelBuilder.Entity("RistoranteManager.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RistoranteManager.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoughType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("RistoranteManager.Models.OrderItemExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemExtras");
                });

            modelBuilder.Entity("RistoranteManager.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "antipasti",
                            IsCustomizable = false,
                            Name = "Bruschetta al Pomodoro",
                            Price = 8m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 2,
                            Category = "antipasti",
                            IsCustomizable = false,
                            Name = "Antipasto Misto",
                            Price = 12m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 3,
                            Category = "antipasti",
                            IsCustomizable = false,
                            Name = "Caprese",
                            Price = 10m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Category = "antipasti",
                            IsCustomizable = false,
                            Name = "Frittura di Mare",
                            Price = 12m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 5,
                            Category = "pasta",
                            IsCustomizable = false,
                            Name = "Spaghetti alla Carbonara",
                            Price = 14m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 6,
                            Category = "pasta",
                            IsCustomizable = false,
                            Name = "Penne all'Arrabbiata",
                            Price = 14m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 7,
                            Category = "pasta",
                            IsCustomizable = false,
                            Name = "Tagliatelle ai Funghi Porcini",
                            Price = 16m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 8,
                            Category = "pasta",
                            IsCustomizable = false,
                            Name = "Risotto ai Frutti di Mare",
                            Price = 18m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 9,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Margherita",
                            Price = 9m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 10,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Diavola",
                            Price = 11m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 11,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Quattro Formaggi",
                            Price = 12m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 12,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Capricciosa",
                            Price = 13m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 13,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Napoletana",
                            Price = 10m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 14,
                            Category = "pizza",
                            IsCustomizable = true,
                            Name = "Prosciutto e Funghi",
                            Price = 12m,
                            Type = "pizzeria"
                        },
                        new
                        {
                            Id = 15,
                            Category = "dessert",
                            IsCustomizable = false,
                            Name = "Tiramisù",
                            Price = 6m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 16,
                            Category = "dessert",
                            IsCustomizable = false,
                            Name = "Panna Cotta",
                            Price = 6m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 17,
                            Category = "dessert",
                            IsCustomizable = false,
                            Name = "Cannoli Siciliani",
                            Price = 7m,
                            Type = "kitchen"
                        },
                        new
                        {
                            Id = 18,
                            Category = "dessert",
                            IsCustomizable = false,
                            Name = "Gelato Artigianale",
                            Price = 6m,
                            Type = "kitchen"
                        });
                });

            modelBuilder.Entity("RistoranteManager.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Covers")
                        .HasColumnType("int");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Covers = 0,
                            IsClosed = false,
                            Number = 1,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Covers = 0,
                            IsClosed = false,
                            Number = 2,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Covers = 0,
                            IsClosed = false,
                            Number = 3,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Covers = 0,
                            IsClosed = false,
                            Number = 4,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Covers = 0,
                            IsClosed = false,
                            Number = 5,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 6,
                            Covers = 0,
                            IsClosed = false,
                            Number = 6,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 7,
                            Covers = 0,
                            IsClosed = false,
                            Number = 7,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 8,
                            Covers = 0,
                            IsClosed = false,
                            Number = 8,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 9,
                            Covers = 0,
                            IsClosed = false,
                            Number = 9,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 10,
                            Covers = 0,
                            IsClosed = false,
                            Number = 10,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 11,
                            Covers = 0,
                            IsClosed = false,
                            Number = 11,
                            Status = 0,
                            UseCount = 0
                        },
                        new
                        {
                            Id = 12,
                            Covers = 0,
                            IsClosed = false,
                            Number = 12,
                            Status = 0,
                            UseCount = 0
                        });
                });

            modelBuilder.Entity("RistoranteManager.Models.Order", b =>
                {
                    b.HasOne("RistoranteManager.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("RistoranteManager.Models.OrderItem", b =>
                {
                    b.HasOne("RistoranteManager.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RistoranteManager.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RistoranteManager.Models.OrderItemExtra", b =>
                {
                    b.HasOne("RistoranteManager.Models.OrderItem", "OrderItem")
                        .WithMany("Extras")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("RistoranteManager.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RistoranteManager.Models.OrderItem", b =>
                {
                    b.Navigation("Extras");
                });

            modelBuilder.Entity("RistoranteManager.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
