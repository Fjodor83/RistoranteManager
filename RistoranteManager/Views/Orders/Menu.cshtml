@model RistoranteManager.Models.ViewModels.MenuViewModel
@{
ViewData["Title"] = "Menu";
}
<div class="mb-4">
    <div class="d-flex overflow-auto pb-2">
        <a asp-action="Menu" asp-route-tableId="@Model.TableId" asp-route-category="antipasti" 
           class="btn @(Model.Category == "antipasti" ? "btn-danger" : "btn-outline-danger") me-2">
            Antipasti
        </a>
        <a asp-action="Menu" asp-route-tableId="@Model.TableId" asp-route-category="pasta" 
           class="btn @(Model.Category == "pasta" ? "btn-danger" : "btn-outline-danger") me-2">
            Pasta
        </a>
        <a asp-action="Menu" asp-route-tableId="@Model.TableId" asp-route-category="pizza" 
           class="btn @(Model.Category == "pizza" ? "btn-danger" : "btn-outline-danger") me-2">
            Pizze
        </a>
        <a asp-action="Menu" asp-route-tableId="@Model.TableId" asp-route-category="dessert" 
           class="btn @(Model.Category == "dessert" ? "btn-danger" : "btn-outline-danger") me-2">
            Dessert
        </a>
    </div>
</div>

<div class="row">
    @foreach (var product in Model.Products)
    {
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h3 class="card-title">@product.Name</h3>
                            <span class="badge @(product.Type == "kitchen" ? "bg-info" : "bg-warning")">
                                @(product.Type == "kitchen" ? "Cucina" : "Pizzeria")
                            </span>
                        </div>
                        <span class="fs-4 fw-bold">€@product.Price.ToString("0.00")</span>
                    </div>
                    
                    @if (product.IsCustomizable)
                    {
                        <button type="button" class="btn btn-danger w-100" data-bs-toggle="modal" data-bs-target="#pizzaModal" 
                                data-product-id="@product.Id" data-product-name="@product.Name" data-product-price="@product.Price">
                            Aggiungi
                        </button>
                    }
                    else
                    {
                        <form asp-action="AddItem" method="post">
                            <input type="hidden" name="tableId" value="@Model.TableId" />
                            <input type="hidden" name="productId" value="@product.Id" />
                            <button type="submit" class="btn btn-danger w-100">Aggiungi</button>
                        </form>
                    }
                </div>
            </div>
        </div>
    }
</div>
                <div class="mb-4">
                    <h5>Scegli il tipo di impasto:</h5>
                    <div class="row">
                        @foreach (var dough in Model.DoughTypes)
                        {
                            <div class="col-md-6 mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="doughType" id="dough@(dough.Id)" 
                                           value="@dough.Name" @(dough.Id == 1 ? "checked" : "") data-price="@dough.AdditionalPrice">
                                    <label class="form-check-label" for="dough@(dough.Id)">
                                        @dough.Name @(dough.AdditionalPrice > 0 ? $"(+€{dough.AdditionalPrice:0.00})" : "(+€0.00)")
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="mb-4">
                    <h5>Ingredienti extra:</h5>
                    <div class="row">
                        @foreach (var extra in Model.Extras)
                        {
                            <div class="col-md-6 mb-2">
                                <div class="form-check">
                                    <input class="form-check-input extra-checkbox" type="checkbox" name="extraIds" 
                                           id="extra@(extra.Id)" value="@extra.Id" data-price="@extra.Price">
                                    <label class="form-check-label" for="extra@(extra.Id)">
                                        @extra.Name (+€@extra.Price.ToString("0.00"))
                                    </label>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center border-top pt-3">
                    <div>
                        <p class="fs-5 fw-bold">Totale: €<span id="pizzaTotal">0.00</span></p>
                    </div>
                    <div>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                        <button type="submit" class="btn btn-danger">Aggiungi</button>
                    </div>
                </div>
            
        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Pizza modal functionality
        const pizzaModal = document.getElementById('pizzaModal');
        if (pizzaModal) {
        pizzaModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const productId = button.getAttribute('data-product-id');
        const productName = button.getAttribute('data-product-name');
        const productPrice = parseFloat(button.getAttribute('data-product-price'));
            // Set modal title and product ID
            document.getElementById('pizzaModalLabel').textContent = `Personalizza ${productName}`;
            document.getElementById('productId').value = productId;
            
            // Reset selections
            document.querySelectorAll('input[name="doughType"]')[0].checked = true;
            document.querySelectorAll('.extra-checkbox').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            // Update total
            updatePizzaTotal(productPrice);
        });
        
        // Update total when selections change
        document.querySelectorAll('input[name="doughType"]').forEach(radio => {
            radio.addEventListener('change', updatePizzaTotalFromInputs);
        });
        
        document.querySelectorAll('.extra-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updatePizzaTotalFromInputs);
        });
        
        function updatePizzaTotalFromInputs() {
            const productId = document.getElementById('productId').value;
            const button = document.querySelector(`button[data-product-id="${productId}"]`);
            const basePrice = parseFloat(button.getAttribute('data-product-price'));
            updatePizzaTotal(basePrice);
        }
        
        function updatePizzaTotal(basePrice) {
            let total = basePrice;
            
            // Add dough price
            const selectedDough = document.querySelector('input[name="doughType"]:checked');
            if (selectedDough) {
                total += parseFloat(selectedDough.getAttribute('data-price'));
            }
            
            // Add extras price
            document.querySelectorAll('.extra-checkbox:checked').forEach(extra => {
                total += parseFloat(extra.getAttribute('data-price'));
            });
            
            document.getElementById('pizzaTotal').textContent = total.toFixed(2);
        }
    }
</script>
}